[
  {
    "title": "The Node.js Event Loop, Timers, and process.nextTick()",
    "createdAt": "2018-05-12",
    "link": "../essay/2018/05/12/event-loop-timers-and-nexttick.html",
    "preview": "事件循环允许Node.js执行非阻塞I/O操作, 尽管,JavaScript是单线程.由于现代大多数系统内核是多线程的,他们可以在后台执行多个操作.当某一个操作完成时,系统内核告诉Node.js,以便可以将适当的回调(callback)添加到轮询(poll)队列中去执行."
  },
  {
    "title": "通过es6的Promise和async/await语法糖将异步变成同步.",
    "createdAt": "2018-05-10",
    "link": "../essay/2018/05/10/es6-async-sync.html",
    "preview": "在过去的时候,如果代码设计的不好,很容易就出现'回调地狱',因为的所设计的程序,后面的步骤依赖于前面的数据. 例如,一层一层的嵌套:"
  },
  {
    "title": "彻底告别atom",
    "createdAt": "2018-05-07",
    "link": "../essay/2018/05/07/leave-atom.html",
    "preview": "我从windows转到ubuntu做开发之后,选择的编辑器就是atom,在我的ubuntu上用atom一直到今天.不过,我要跟atom彻底说拜拜了."
  },
  {
    "title": "基于ubuntu16.04+使用shadowsocks(客户端)",
    "createdAt": "2018-04-26",
    "link": "../essay/2018/04/26/shadowsocks.html",
    "preview": "先确保电脑有pip. > sudo apt-get install python-pip或者 > sudo apt-get install python3-pip 然后下载shadowsocks库"
  },
  {
    "title": "node 垃圾回收机制",
    "createdAt": "2018-04-22",
    "link": "../essay/2018/04/22/node-memory.html",
    "preview": "变量,对象都在堆中.(Buffer有C++来接管分配),V8的垃圾回收机制主要基于分代式垃圾回收机制.在V8中,主要将内存分为新生代和老生代两代.新生代中的对象为存活时间较短的对象,老生代中的对象为存活时间较长或常驻内存的对象."
  },
  {
    "title": "浅谈前端优化的几个思路",
    "createdAt": "2018-04-19",
    "link": "../essay/2018/04/19/optimization.html",
    "preview": "页面中如果有很多图片、icon(小图标),这样会有很多HTTP请求,一个图就是一个HTTP请求,建立TCP连接进行三次握手,这些都是耗费时间的."
  },
  {
    "title": "React框架构建的blog新主题",
    "createdAt": "2018-04-17",
    "link": "../essay/2018/04/17/new-theme.html",
    "preview": "最近一时脑热,用react做了一个单页面应用,来替换过去那个bootstrap做的blog首页.不过依旧是以简约风格为主制作的."
  },
  {
    "title": "基于docker+gunicorn部署sanic项目",
    "createdAt": "2018-04-14",
    "link": "../essay/2018/04/14/deploy-sanic.html",
    "preview": "最近云服务提供商在打价格战,我在滴滴云上花了很少的钱租了一个月的云服务器: 公网ip是： 116.85.42.182, 以下我以116.85.42.182这个ip为演示,当你自己在部署的时候请换成自己的ip地址."
  }
]
